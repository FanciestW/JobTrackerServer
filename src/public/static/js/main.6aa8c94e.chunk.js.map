{"version":3,"sources":["Components/Navbar/Navbar.js","Components/JobApplicationListItem/JobApplicationListItem.js","Components/JobApplicationList/JobApplicationList.js","Components/InterviewListItem/InterviewListItem.js","Components/InterviewList/InterviewList.js","Components/Dashboard/Dashboard.js","Components/ErrorPage/ErrorPage.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["Navbar","props","state","open","handleToggleDrawer","bind","this","setState","sideNav","className","role","onClick","onKeyDown","List","to","style","color","textDecoration","ListItem","button","ListItemIcon","ListItemText","primary","AppBar","position","Toolbar","IconButton","edge","aria-label","Typography","variant","SwipeableDrawer","onOpen","onClose","Component","withRouter","JobApplicationListItem","Grid","container","direction","alignItems","spacing","item","xs","Checkbox","padding","inputProps","noWrap","title","company","status","defaultProps","JobApplicationList","jobListItems","jobs","map","job","index","key","divided","length","Divider","widget","InterviewListItem","options","year","month","day","date","Date","toLocaleDateString","InterviewList","interviewListItems","interviews","interview","Dashboard","height","width","margin","Paper","overflow","ErrorPage","statusCode","theme","createMuiTheme","palette","type","responsiveFontSizes","App","CssBaseline","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6aa8c94e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { AppBar, List, Toolbar, Typography, IconButton, ListItem, ListItemIcon, ListItemText, SwipeableDrawer } from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport AddIcon from '@material-ui/icons/Add';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport AssignmentIcon from '@material-ui/icons/Assignment';\nimport PeopleIcon from '@material-ui/icons/People';\nimport WorkIcon from '@material-ui/icons/Work';\nimport { BrowserRouter as Router, Link } from 'react-router-dom';\nimport { withRouter } from 'react-router';\nimport './Navbar.scss';\n\nclass Navbar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n    };\n    this.handleToggleDrawer = this.handleToggleDrawer.bind(this);\n  }\n\n  handleToggleDrawer() {\n    if (this.state.open) {\n      this.setState({ open: false });\n    } else {\n      this.setState({ open: true });\n    }\n  }\n\n  render() {\n    const sideNav = (\n      <div className=\"sideNav\"\n        role=\"presentation\"\n        onClick={this.handleToggleDrawer}\n        onKeyDown={this.handleToggleDrawer}>\n        <Router></Router>\n        <List>\n          <Link to=\"/dashboard\" style={{ color: 'inherit', textDecoration: 'none' }}>\n            <ListItem button>\n              <ListItemIcon className=\"drawer-icon\">\n                <DashboardIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Dashboard\" />\n            </ListItem>\n          </Link>\n          <Link to=\"/jobapps\" style={{ color: 'inherit', textDecoration: 'none' }}>\n            <ListItem button>\n              <ListItemIcon className=\"drawer-icon\">\n                <AssignmentIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Job Applications\" />\n            </ListItem>\n          </Link>\n          <Link to=\"/interviews\" style={{ color: 'inherit', textDecoration: 'none' }}>\n            <ListItem button>\n              <ListItemIcon className=\"drawer-icon\">\n                <PeopleIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Interviews\" />\n            </ListItem>\n          </Link>\n          <Link to=\"/jobs\" style={{ color: 'inherit', textDecoration: 'none' }}>\n            <ListItem button>\n              <ListItemIcon className=\"drawer-icon\">\n                <WorkIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Job Listings\" />\n            </ListItem>\n          </Link>\n          <Link to=\"/profile\" style={{ color: 'inherit', textDecoration: 'none' }}>\n            <ListItem button>\n              <ListItemIcon className=\"drawer-icon\">\n                <AccountCircleIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"My Profile\" />\n            </ListItem>\n          </Link>\n        </List>\n      </div>\n    );\n    return (\n      <div>\n        <AppBar position=\"static\" className=\"app-bar\">\n          <Toolbar className=\"nav-toolbar\">\n            <IconButton edge=\"start\" className=\"menu-button\" onClick={this.handleToggleDrawer} color=\"inherit\" aria-label=\"menu\">\n              <MenuIcon />\n            </IconButton>\n            <Typography variant=\"h6\" >\n              Dashboard\n            </Typography>\n            <SwipeableDrawer open={this.state.open} onOpen={this.handleToggleDrawer} onClose={this.handleToggleDrawer} className={'side-drawer'}>\n              {sideNav}\n            </SwipeableDrawer>\n            <div className=\"right\">\n              <IconButton color=\"inherit\" aria-label=\"add\">\n                <AddIcon />\n              </IconButton>\n              <IconButton color=\"inherit\" aria-label=\"Notifications\">\n                <NotificationsIcon />\n              </IconButton>\n              <IconButton color=\"inherit\" aria-label=\"profile\">\n                <AccountCircleIcon />\n              </IconButton>\n              <IconButton color=\"inherit\" aria-label=\"settings\">\n                <SettingsIcon />\n              </IconButton>\n            </div>\n          </Toolbar>\n        </AppBar>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Navbar);","import React, { Component } from 'react';\nimport { Grid, Checkbox, Typography } from '@material-ui/core';\nimport PropTypes from 'prop-types';\n\nclass JobApplicationListItem extends Component {\n  render() {\n    return (\n      <Grid container direction=\"row\" alignItems=\"center\" spacing={1}>\n        <Grid item xs={1}>\n          <Checkbox style={{padding: '4px'}} inputProps={{'aria-label': 'checkbox'}} />\n        </Grid>\n        <Grid item xs={6}>\n          <Typography variant=\"body1\" noWrap>{this.props.title}</Typography>\n        </Grid>\n        <Grid item xs>\n          <Typography variant=\"body1\" noWrap>{this.props.company}</Typography>\n        </Grid>\n        <Grid item xs={2}>\n          <Typography variant=\"body1\" noWrap>{this.props.status}</Typography>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nJobApplicationListItem.propTypes = {\n  title: PropTypes.string.isRequired,\n  company: PropTypes.string.isRequired,\n  status: PropTypes.string.isRequired,\n};\n\nJobApplicationListItem.defaultProps = {\n};\n\nexport default JobApplicationListItem;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { List, ListItem, Divider } from '@material-ui/core';\nimport JobApplicationListItem from '../JobApplicationListItem/JobApplicationListItem';\n\nclass JobApplicationList extends Component {\n  render() {\n    const jobListItems = this.props.jobs.map((job, index) => (\n      <div key={index}>\n        <ListItem>\n          <JobApplicationListItem title={job.title} company={job.company} status={job.status} />\n        </ListItem>\n        {this.props.divided ? index + 1 < this.props.jobs.length ? <Divider /> : null : null}\n      </div>\n    ));\n    return (\n      <List>\n        {jobListItems}\n      </List>\n    );\n  }\n}\n\nJobApplicationList.propTypes = {\n  jobs: PropTypes.array,\n  widget: PropTypes.bool,\n  divided: PropTypes.bool,\n};\n\nJobApplicationList.defaultProps = {\n  jobs: [],\n  widget: false,\n  divided: false,\n};\n\nexport default JobApplicationList;","import React, { Component } from 'react';\nimport { Checkbox, Grid, Typography } from '@material-ui/core';\nimport PropTypes from 'prop-types';\n\nclass InterviewListItem extends Component {\n  render() {\n    const options = { year: 'numeric', month: 'short', day: 'numeric' };\n    const date = this.props.date instanceof Date ? \n      this.props.date.toLocaleDateString('en-EN', options) :\n      new Date(this.props.date).toLocaleDateString('en-EN', options);\n    return (\n      <Grid container direction=\"row\" alignItems=\"center\" spacing={1}>\n        <Grid item xs={1}>\n          <Checkbox style={{padding: '4px'}} inputProps={{'aria-label': 'checkbox'}} />\n        </Grid>\n        <Grid item xs>\n          <Typography variant=\"body1\" noWrap>{this.props.company}</Typography>\n        </Grid>\n        <Grid item xs={5}>\n          <Typography variant=\"body1\" noWrap>{this.props.title}</Typography>\n        </Grid>\n        <Grid item xs={2}>\n          <Typography variant=\"body1\" noWrap>{date}</Typography>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nInterviewListItem.propTypes = {\n  title: PropTypes.string,\n  company: PropTypes.string.isRequired,\n  date: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.object,\n  ]),\n};\n\nInterviewListItem.defaultProps = {\n  title: '',\n  date: 'No Date'\n};\n\nexport default InterviewListItem;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Divider, List, ListItem } from '@material-ui/core';\nimport InterviewListItem from '../InterviewListItem/InterviewListItem';\n\nclass InterviewList extends Component {\n  render() {\n    const interviewListItems = this.props.interviews.map((interview, index) => (\n      <div key={index}>\n        <ListItem>\n          <InterviewListItem title={interview.title} company={interview.company} date={interview.date} />\n        </ListItem>\n        {this.props.divided ? index + 1 < this.props.interviews.length ? <Divider /> : null : null}\n      </div>\n    ));\n    return (\n      <List>\n        {interviewListItems}\n      </List>\n    );\n  }\n}\n\nInterviewList.propTypes = {\n  interviews: PropTypes.array,\n  widget: PropTypes.bool,\n  divided: PropTypes.bool,\n};\n\nInterviewList.defaultProps = {\n  interviews: [],\n  widget: false,\n  divided: false,\n};\n\nexport default InterviewList;\n","import React, { Component } from 'react';\nimport { Paper, Grid } from '@material-ui/core';\nimport JobApplicationList from '../JobApplicationList/JobApplicationList';\nimport InterviewList from '../InterviewList/InterviewList';\nimport './Dashboard.scss';\n\nclass Dashboard extends Component {\n  render() {\n    const jobs = [\n      {\n        title: 'Software Engineer Intern',\n        company: 'Microsoft',\n        status: 'Applied',\n      },\n      {\n        title: 'Software Engineer New Grad',\n        company: 'Facebook',\n        status: 'Interviewing',\n      },\n      {\n        title: 'Software Engineer Intern',\n        company: 'Google',\n        status: 'Interviewing'\n      }\n    ];\n    const interviews = [\n      {\n        title: 'Software Engineer New Grad',\n        company: 'Facebook',\n        date: '12-12-19',\n      },\n      {\n        title: 'Software Engineer Intern',\n        company: 'Google',\n        date: new Date('1/10/2019'),\n      }\n    ];\n    return (\n      <div className=\"dashboard\">\n        <Grid container direction=\"column\" spacing={2} style={{ height: '100%', width: '100%', margin: '0' }}>\n          <Grid item xs>\n            <h1>Recent Job Applications</h1>\n            <Paper style={{height: '60%', overflow: 'auto'}}>\n              <JobApplicationList jobs={jobs} divided />\n            </Paper>\n          </Grid>\n          <Grid item xs>\n            <h1>Upcoming Interviews</h1>\n            <Paper style={{height: '60%', overflow: 'auto'}}>\n              <InterviewList interviews={interviews} divided />\n            </Paper>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass ErrorPage extends Component {\n  render() {\n    return (\n      <h1>{this.props.statusCode}</h1>\n    );\n  }\n}\n\nErrorPage.propTypes = {\n  statusCode: PropTypes.number,\n};\n\nErrorPage.defaultProps = {\n  statusCode: 404,\n};\n\nexport default ErrorPage;\n","import React from 'react';\nimport { MuiThemeProvider, createMuiTheme, responsiveFontSizes } from '@material-ui/core/styles';\nimport { CssBaseline } from '@material-ui/core';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Navbar from '../Navbar/Navbar';\nimport Dashboard from '../Dashboard/Dashboard';\nimport ErrorPage from '../ErrorPage/ErrorPage';\nimport './App.scss';\n\nlet theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n});\ntheme = responsiveFontSizes(theme);\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MuiThemeProvider theme={theme}>\n        <CssBaseline />\n        <Router>\n          <Navbar />\n          <div className=\"app-content\">\n            <Switch>\n              <Route exact path=\"/dashboard\" component={Dashboard} />\n              <Route exact path=\"/\" component={Dashboard} />\n              <Route component={ErrorPage} />\n            </Switch>\n          </div>\n        </Router>\n      </MuiThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}